{
  "task_id": "QAB09",
  "description": "This quantum program prepares a two-qubit quantum state where the measurement results of the qubits are expected to be strongly correlated. The goal is to generate an assertion that verifies this correlation, serving as evidence of entanglement in the system.\n",
  "program": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import Aer\n\nclass EntanglementDetectionCircuit:\n    def __init__(self, shots=1024):\n        self.shots = shots\n        self.circuit = QuantumCircuit(2, 2)\n        self.backend = Aer.get_backend(\"qasm_simulator\")\n\n    def build_circuit(self):\n        # Step 1: Put q0 in superposition\n        self.circuit.h(0)\n\n        # Step 2: Entangle q0 and q1\n        self.circuit.cx(0, 1)\n\n        # Step 3: Measurement\n        self.circuit.measure([0, 1], [0, 1])\n\n    def run(self):\n        self.build_circuit()\n        transpiled = transpile(self.circuit, self.backend)\n        job = self.backend.run(transpiled, shots=self.shots)\n        result = job.result()\n        counts = result.get_counts()\n        return counts\n\nif __name__ == \"__main__\":\n    circuit_runner = EntanglementDetectionCircuit()\n    output = circuit_runner.run()\n    print(\"Measurement Counts:\", output)\n",
  "complete_prompt": "This quantum program prepares a two-qubit quantum state with strong measurement correlation between the two qubits.\n\nInsert an assertion into the program that checks whether the measurement results of the two qubits are highly correlated.\n\nOutput the complete modified program with the assertion included. No explanations, no comments.\n\nModify the given Python program by inserting a single assertion.\n\nOutput only the full modified Python file — nothing else.\n\nAssertion Format:\n- Insert only the assertion (do not modify any other part of the code).\n- Surround your assertion with the following markers:\n\n    # >>> ASSERTION START\n    <your assertion code>\n    # <<< ASSERTION END\n\n- These markers are mandatory and must wrap only the inserted assertion.\n- Do NOT include explanations, markdown, comments, or additional output.\n- Output must be a valid Python script (ready to save as a .py file).",
  "gold_assertion": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import Aer\n\nclass EntanglementDetectionCircuit:\n    def __init__(self, shots=1024):\n        self.shots = shots\n        self.circuit = QuantumCircuit(2, 2)\n        self.backend = Aer.get_backend(\"qasm_simulator\")\n\n    def build_circuit(self):\n        # Step 1: Put q0 in superposition\n        self.circuit.h(0)\n\n        # Step 2: Entangle q0 and q1\n        self.circuit.cx(0, 1)\n\n        # Step 3: Measurement\n        self.circuit.measure([0, 1], [0, 1])\n\n    def run(self):\n        self.build_circuit()\n        transpiled = transpile(self.circuit, self.backend)\n        job = self.backend.run(transpiled, shots=self.shots)\n        result = job.result()\n        counts = result.get_counts()\n\n        # ----- GOLD ASSERTION START -----\n        # Compute marginal and joint probabilities\n        p_q0_1 = sum(v for k, v in counts.items() if k[0] == \"1\") / self.shots\n        p_q1_1 = sum(v for k, v in counts.items() if k[1] == \"1\") / self.shots\n        p_q0q1_11 = counts.get(\"11\", 0) / self.shots\n\n        # Difference between observed joint and independent expectation\n        expected_independent = p_q0_1 * p_q1_1\n        diff = abs(p_q0q1_11 - expected_independent)\n\n        # Assert strong correlation (positive or negative)\n        assert diff > 0.1, (\n            f\"No strong correlation detected: \"\n            f\"joint={p_q0q1_11:.3f}, independent={expected_independent:.3f}, diff={diff:.3f}\"\n        )\n        # ----- GOLD ASSERTION END -----\n\n        return counts\n\nif __name__ == \"__main__\":\n    circuit_runner = EntanglementDetectionCircuit()\n    output = circuit_runner.run()\n    print(\"Measurement Counts:\", output)\n",
  "faulty": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import Aer\n\nclass EntanglementDetectionCircuit:\n    def __init__(self, shots=1024):\n        self.shots = shots\n        self.circuit = QuantumCircuit(2, 2)\n        self.backend = Aer.get_backend(\"qasm_simulator\")\n\n    def build_circuit(self):\n        # Faulty: Put q0 in superposition, but remove entanglement\n        self.circuit.h(0)\n\n        # ❌ Missing CX(0, 1) — no entanglement created\n\n        # Measurement\n        self.circuit.measure([0, 1], [0, 1])\n\n    def run(self):\n        self.build_circuit()\n        transpiled = transpile(self.circuit, self.backend)\n        job = self.backend.run(transpiled, shots=self.shots)\n        result = job.result()\n        counts = result.get_counts()\n        return counts\n\nif __name__ == \"__main__\":\n    circuit_runner = EntanglementDetectionCircuit()\n    output = circuit_runner.run()\n    print(\"Measurement Counts (Faulty):\", output)\n"
}