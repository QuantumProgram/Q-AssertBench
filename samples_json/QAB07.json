{
  "task_id": "QAB07",
  "description": "This quantum program prepares a quantum state where all possible basis states are expected to appear with roughly equal probability. The goal is to generate an assertion that verifies the uniformity of the output distribution.\n",
  "program": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import Aer\n\nclass UniformDistributionCircuit:\n    def __init__(self, shots=1024):\n        self.shots = shots\n        self.circuit = QuantumCircuit(3, 3)\n        self.backend = Aer.get_backend(\"qasm_simulator\")\n\n    def build_circuit(self):\n        # Step 1: Create superposition on all qubits\n        self.circuit.h(0)\n        self.circuit.h(1)\n        self.circuit.h(2)\n\n        # Step 2: Add light entanglement (optional but makes LLM analysis more challenging)\n        self.circuit.cx(0, 1)\n        self.circuit.cx(1, 2)\n\n        # Step 3: Measurement\n        self.circuit.measure(range(3), range(3))\n\n    def run(self):\n        self.build_circuit()\n        transpiled = transpile(self.circuit, self.backend)\n        job = self.backend.run(transpiled, shots=self.shots)\n        result = job.result()\n        counts = result.get_counts()\n        return counts\n\nif __name__ == \"__main__\":\n    circuit_runner = UniformDistributionCircuit()\n    output = circuit_runner.run()\n    print(\"Measurement Counts:\", output)\n",
  "complete_prompt": "This quantum program prepares a quantum state where all possible outcomes are expected to occur with roughly equal probability.\n\nInsert a Python assertion into the program to verify that the output distribution is approximately uniform.\n\nOutput the complete modified program with the assertion included. No explanations, no comments.\n\nModify the given Python program by inserting a single assertion.\n\nOutput only the full modified Python file â€” nothing else.\n\nAssertion Format:\n- Insert only the assertion (do not modify any other part of the code).\n- Surround your assertion with the following markers:\n\n    # >>> ASSERTION START\n    <your assertion code>\n    # <<< ASSERTION END\n\n- These markers are mandatory and must wrap only the inserted assertion.\n- Do NOT include explanations, markdown, comments, or additional output.\n- Output must be a valid Python script (ready to save as a .py file).",
  "gold_assertion": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import Aer\n\nclass UniformDistributionCircuit:\n    def __init__(self, shots=1024):\n        self.shots = shots\n        self.circuit = QuantumCircuit(3, 3)\n        self.backend = Aer.get_backend(\"qasm_simulator\")\n\n    def build_circuit(self):\n        # Step 1: Create superposition on all qubits\n        self.circuit.h(0)\n        self.circuit.h(1)\n        self.circuit.h(2)\n\n        # Step 2: Add light entanglement\n        self.circuit.cx(0, 1)\n        self.circuit.cx(1, 2)\n\n        # Step 3: Measurement\n        self.circuit.measure(range(3), range(3))\n\n    def run(self):\n        self.build_circuit()\n        transpiled = transpile(self.circuit, self.backend)\n        job = self.backend.run(transpiled, shots=self.shots)\n        result = job.result()\n        counts = result.get_counts()\n\n        # ----- GOLD ASSERTION START -----\n        # Assert that the output distribution is approximately uniform\n        probs = [count / self.shots for count in counts.values()]\n        assert max(probs) - min(probs) < 0.1, f\"Distribution not uniform enough: max-min = {max(probs) - min(probs):.3f}\"\n        # ----- GOLD ASSERTION END -----\n\n        return counts\n\nif __name__ == \"__main__\":\n    circuit_runner = UniformDistributionCircuit()\n    output = circuit_runner.run()\n    print(\"Measurement Counts:\", output)\n",
  "faulty": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import Aer\nimport numpy as np\n\nclass UniformDistributionCircuit:\n    def __init__(self, shots=1024):\n        self.shots = shots\n        self.circuit = QuantumCircuit(3, 3)\n        self.backend = Aer.get_backend(\"qasm_simulator\")\n\n    def build_circuit(self):\n        # Faulty: Apply Hadamard only to qubit 0 and 2, omit q[1]\n        self.circuit.h(0)\n        # self.circuit.h(1)  # <-- Removed on purpose\n        self.circuit.h(2)\n\n        # Entanglement (still applied)\n        self.circuit.cx(0, 1)\n        self.circuit.cx(1, 2)\n\n        # Measurement\n        self.circuit.measure(range(3), range(3))\n\n    def run(self):\n        self.build_circuit()\n        transpiled = transpile(self.circuit, self.backend)\n        job = self.backend.run(transpiled, shots=self.shots)\n        result = job.result()\n        counts = result.get_counts()\n        return counts\n\nif __name__ == \"__main__\":\n    circuit_runner = UniformDistributionCircuit()\n    output = circuit_runner.run()\n    print(\"Measurement Counts (Faulty):\", output)\n"
}