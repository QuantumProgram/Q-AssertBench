{
  "task_id": "QAB30",
  "description": "This benchmark circuit simulates the structural behavior of Shor's algorithm with 15 qubits. Though simplified, it models critical stages including counting superposition, entanglement, and inverse QFT. The objective is to test whether the output reflects a strong periodic structure in the counting register.\n",
  "program": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import AerSimulator\nimport numpy as np\n\n\nclass ShorLargeCircuit:\n    \"\"\"\n    QAB-30: Shor's Algorithm Benchmark with 15 Qubits.\n    This version emphasizes circuit width and depth.\n    Modular exponentiation is abstracted for benchmarking.\n    \"\"\"\n\n    def __init__(self, N=15, a=7, shots=1024):\n        self.N = N\n        self.a = a\n        self.n_count = 8           # Counting qubits\n        self.work_qubits = 7       # Work/ancilla register\n        self.total_qubits = self.n_count + self.work_qubits\n        self.backend = AerSimulator()\n        self.shots = shots\n        self.circuit = None\n        self.counts = None\n\n    def build_circuit(self):\n        qc = QuantumCircuit(self.total_qubits, self.n_count)\n\n        # Step 1: Hadamard on counting register\n        for q in range(self.n_count):\n            qc.h(q)\n\n        # Step 2: Fake modular exponentiation\n        # Entangle counting qubits with work qubits\n        for j in range(self.n_count):\n            for k in range(self.work_qubits):\n                qc.cx(j, self.n_count + k)\n\n        # Step 3: Inverse QFT on counting register\n        for j in range(self.n_count // 2):\n            qc.swap(j, self.n_count - j - 1)\n\n        for j in range(self.n_count):\n            qc.h(j)\n            for k in range(j + 1, self.n_count):\n                angle = -np.pi / (2 ** (k - j))\n                qc.cp(angle, k, j)\n\n        # Step 4: Measure counting qubits\n        for i in range(self.n_count):\n            qc.measure(i, i)\n\n        self.circuit = qc\n\n    def run(self):\n        self.build_circuit()\n        compiled = transpile(self.circuit, self.backend)\n        job = self.backend.run(compiled, shots=self.shots)\n        result = job.result()\n        self.counts = result.get_counts()\n        return self.counts\n\n\nif __name__ == \"__main__\":\n    program = ShorLargeCircuit()\n    result = program.run()\n    print(\"Measurement Results:\")\n    for bitstring, count in result.items():\n        print(f\"{bitstring}: {count}\")\n",
  "complete_prompt": "This quantum program is a large-scale instance inspired by Shor’s algorithm. It uses 15 qubits to simulate the key structural phases of order-finding: uniform superposition, controlled modular operations, and quantum Fourier transform.\n\nInsert an inline diagnostic check that validates whether the measurement results exhibit strong periodicity in the output distribution of the counting register.\n\nOutput the complete modified program with the assertion included. No explanations, no comments.\n\nModify the given Python program by inserting a single assertion.\n\nOutput only the full modified Python file — nothing else.\n\nAssertion Format:\n- Insert only the assertion (do not modify any other part of the code).\n- Surround your assertion with the following markers:\n\n    # >>> ASSERTION START\n    <your assertion code>\n    # <<< ASSERTION END\n\n- These markers are mandatory and must wrap only the inserted assertion.\n- Do NOT include explanations, markdown, comments, or additional output.\n- Output must be a valid Python script (ready to save as a .py file).",
  "gold_assertion": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import AerSimulator\nimport numpy as np\n\n\nclass ShorLargeCircuit:\n    def __init__(self, N=15, a=7, shots=1024):\n        self.N = N\n        self.a = a\n        self.n_count = 8\n        self.work_qubits = 7\n        self.total_qubits = self.n_count + self.work_qubits\n        self.backend = AerSimulator()\n        self.shots = shots\n        self.circuit = None\n        self.counts = None\n\n    def build_circuit(self):\n        qc = QuantumCircuit(self.total_qubits, self.n_count)\n\n        for q in range(self.n_count):\n            qc.h(q)\n\n        for j in range(self.n_count):\n            for k in range(self.work_qubits):\n                qc.cx(j, self.n_count + k)\n\n        # Inverse QFT\n        for j in range(self.n_count // 2):\n            qc.swap(j, self.n_count - j - 1)\n\n        for j in range(self.n_count):\n            qc.h(j)\n            for k in range(j + 1, self.n_count):\n                angle = -np.pi / (2 ** (k - j))\n                qc.cp(angle, k, j)\n\n        for i in range(self.n_count):\n            qc.measure(i, i)\n\n        self.circuit = qc\n\n    def run(self):\n        self.build_circuit()\n        compiled = transpile(self.circuit, self.backend)\n        job = self.backend.run(compiled, shots=self.shots)\n        result = job.result()\n        self.counts = result.get_counts()\n\n        # ----- GOLD ASSERTION START -----\n        sorted_counts = sorted(self.counts.items(), key=lambda x: -x[1])\n        topk = 3\n        topk_total = sum(v for _, v in sorted_counts[:topk])\n        total = sum(self.counts.values())\n        ratio = topk_total / total\n        print(f\"[GOLD ASSERTION] Top-{topk} states carry {ratio:.3f} of probability mass\")\n        assert ratio > 0.1, (\n            f\"Expected top-{topk} peaks to dominate (>10%), but got {ratio:.3f}\"\n        )\n        # ----- GOLD ASSERTION END -----\n\n        return self.counts\n\n\nif __name__ == \"__main__\":\n    program = ShorLargeCircuit()\n    result = program.run()\n    print(\"Measurement Results:\")\n    for b, c in result.items():\n        print(f\"{b}: {c}\")\n",
  "faulty": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import AerSimulator\nimport numpy as np\n\n\nclass ShorLargeCircuitFaulty:\n    def __init__(self, N=15, a=7, shots=1024):\n        self.N = N\n        self.a = a\n        self.n_count = 8\n        self.work_qubits = 7\n        self.total_qubits = self.n_count + self.work_qubits\n        self.backend = AerSimulator()\n        self.shots = shots\n        self.circuit = None\n        self.counts = None\n\n    def build_circuit(self):\n        qc = QuantumCircuit(self.total_qubits, self.n_count)\n\n        # Step 1: Hadamard on counting register\n        for q in range(self.n_count):\n            qc.h(q)\n\n        # ❌ Step 2: Remove all entanglement (missing QPE-like CX structure)\n        # (This simulates a circuit with structural fault in phase estimation)\n\n        # Step 3: Apply inverse QFT to counting register\n        for j in range(self.n_count // 2):\n            qc.swap(j, self.n_count - j - 1)\n\n        for j in range(self.n_count):\n            qc.h(j)\n            for k in range(j + 1, self.n_count):\n                angle = -np.pi / (2 ** (k - j))\n                qc.cp(angle, k, j)\n\n        # Step 4: Measure counting register\n        for i in range(self.n_count):\n            qc.measure(i, i)\n\n        self.circuit = qc\n\n    def run(self):\n        self.build_circuit()\n        compiled = transpile(self.circuit, self.backend)\n        job = self.backend.run(compiled, shots=self.shots)\n        result = job.result()\n        self.counts = result.get_counts()\n        return self.counts\n\n\nif __name__ == \"__main__\":\n    program = ShorLargeCircuitFaulty()\n    result = program.run()\n    print(\"Faulty Measurement Results:\")\n    for b, c in result.items():\n        print(f\"{b}: {c}\")\n"
}