{
  "task_id": "QAB23",
  "description": "This quantum program implements Grover's search algorithm on 3 qubits. The oracle marks two states, |101⟩ and |110⟩, and the diffusion operator amplifies their measurement probabilities. The expected result is that these marked states dominate the measurement outcomes. The task is to generate an assertion that verifies the dominance of the marked states.\n",
  "program": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import Aer\n\n\nclass GroverSearch:\n    def __init__(self, shots=1024):\n        self.n = 3\n        self.shots = shots\n        self.backend = Aer.get_backend(\"qasm_simulator\")\n\n    def build_circuit(self):\n        qc = QuantumCircuit(self.n, self.n)\n\n        # Step 1: superposition\n        qc.h(range(self.n))\n        qc.barrier()\n\n        # Step 2: Oracle (mark |101> and |110>)\n        qc.cz(2, 0)\n        qc.cz(2, 1)\n        qc.barrier()\n\n        # Step 3: Diffusion operator (inversion about mean)\n        qc.h(range(self.n))\n        qc.x(range(self.n))\n        qc.barrier()\n        qc.h(2)\n        qc.ccx(0, 1, 2)\n        qc.h(2)\n        qc.barrier()\n        qc.x(range(self.n))\n        qc.h(range(self.n))\n\n        # Step 4: Measurement\n        qc.measure(range(self.n), range(self.n))\n        return qc\n\n    def run(self):\n        qc = self.build_circuit()\n        transpiled = transpile(qc, self.backend)\n        job = self.backend.run(transpiled, shots=self.shots)\n        result = job.result()\n        return result.get_counts()\n\n\nif __name__ == \"__main__\":\n    grover = GroverSearch()\n    output = grover.run()\n    print(\"Grover search results (3 qubits):\", output)\n",
  "complete_prompt": "This quantum program implements Grover's search algorithm on 3 qubits.\nThe oracle marks specific target states, and the diffusion operator amplifies their probability.\nInsert an assertion into the program to verify that the measurement results\nare dominated by the marked target states.\n\nOutput the complete modified program with the assertion included. No explanations, no comments.\n\nModify the given Python program by inserting a single assertion.\n\nOutput only the full modified Python file — nothing else.\n\nAssertion Format:\n- Insert only the assertion (do not modify any other part of the code).\n- Surround your assertion with the following markers:\n\n    # >>> ASSERTION START\n    <your assertion code>\n    # <<< ASSERTION END\n\n- These markers are mandatory and must wrap only the inserted assertion.\n- Do NOT include explanations, markdown, comments, or additional output.\n- Output must be a valid Python script (ready to save as a .py file).",
  "gold_assertion": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import Aer\n\n\nclass GroverSearch:\n    def __init__(self, shots=1024):\n        self.n = 3\n        self.shots = shots\n        self.backend = Aer.get_backend(\"qasm_simulator\")\n\n    def build_circuit(self):\n        qc = QuantumCircuit(self.n, self.n)\n\n        qc.h(range(self.n))\n        qc.barrier()\n\n        qc.cz(2, 0)\n        qc.cz(2, 1)\n        qc.barrier()\n\n        qc.h(range(self.n))\n        qc.x(range(self.n))\n        qc.barrier()\n        qc.h(2)\n        qc.ccx(0, 1, 2)\n        qc.h(2)\n        qc.barrier()\n        qc.x(range(self.n))\n        qc.h(range(self.n))\n\n        qc.measure(range(self.n), range(self.n))\n        return qc\n\n    def run(self):\n        qc = self.build_circuit()\n        transpiled = transpile(qc, self.backend)\n        job = self.backend.run(transpiled, shots=self.shots)\n        result = job.result()\n        counts = result.get_counts()\n\n        # ----- GOLD ASSERTION START -----\n        # Expect results dominated by |101> and |110>\n        target_states = [\"101\", \"110\"]\n        total_target = sum(counts.get(s, 0) for s in target_states)\n        ratio = total_target / self.shots\n        assert ratio > 0.8, f\"Expected target states to dominate, got {counts}\"\n        # ----- GOLD ASSERTION END -----\n\n        return counts\n\n\nif __name__ == \"__main__\":\n    grover = GroverSearch()\n    output = grover.run()\n    print(\"Grover search with assertion passed.\")\n    print(\"Results:\", output)\n",
  "faulty": "from qiskit import QuantumCircuit, transpile\nfrom qiskit_aer import Aer\n\n\nclass FaultyGroverSearch:\n    def __init__(self, shots=1024):\n        self.n = 3\n        self.shots = shots\n        self.backend = Aer.get_backend(\"qasm_simulator\")\n\n    def build_circuit(self):\n        qc = QuantumCircuit(self.n, self.n)\n\n        qc.h(range(self.n))\n        qc.barrier()\n\n        # ❌ Faulty oracle: only marks |101>, misses |110>\n        qc.cz(2, 0)\n        qc.barrier()\n\n        qc.h(range(self.n))\n        qc.x(range(self.n))\n        qc.barrier()\n        qc.h(2)\n        qc.ccx(0, 1, 2)\n        qc.h(2)\n        qc.barrier()\n        qc.x(range(self.n))\n        qc.h(range(self.n))\n\n        qc.measure(range(self.n), range(self.n))\n        return qc\n\n    def run(self):\n        qc = self.build_circuit()\n        transpiled = transpile(qc, self.backend)\n        job = self.backend.run(transpiled, shots=self.shots)\n        result = job.result()\n        return result.get_counts()\n\n\nif __name__ == \"__main__\":\n    grover = FaultyGroverSearch()\n    output = grover.run()\n    print(\"Faulty Grover results (3 qubits):\", output)\n"
}